# -*- mode: python -*-
import os, sys, socket, time
import getpass
# Inherit the environment from my parent.
Import('env')

# Make a copy of the environment, so my changes are limited in this directory and sub-directories.
env = env.Clone()


config_h_content_template = """//signature.h
#ifndef __AITHETA_INDEXER_CONFIG_H
#define __AITHETA_INDEXER_CONFIG_H
#define __PLUGIN_VERSION "%(aitheta_indexer_version)s"
#define __PLUGIN_COMMIT_INFO "%(aitheta_indexer_commit_info)s"
#define __PLUGIN_BUILD_INFO "%(aitheta_indexer_build_info)s"
#endif // __AITHETA_INDEXER_CONFIG_H
"""

def run(cmd):
    import subprocess
    p = subprocess.Popen(cmd, shell=True, close_fds=False,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if 0 != p.returncode:
        raise Exception('Execute cmd [%s] faild. data[%s] error[%s], code[%d]'
                        % (cmd, stdout, stderr, p.returncode))
    return stdout

def runGitCmd(cmd):
    try:
        gitInfo = run(cmd)
    except Exception as e:
        gitInfo = ""
    return gitInfo

def GenerateBuildInfo():
    login_name = getpass.getuser()
    try:
        host_ip = socket.gethostbyname(socket.gethostname())
    except:
        host_ip = 'unknown_host'
    build_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    return "%s@%s %s" % (login_name, host_ip, build_time)

def GenerateGitCommitInfo():
    log_info = runGitCmd("git log --pretty=format:'%H %s (%cn)' -1")
    return log_info.replace('"', '\\"').replace("'", "\\'").replace('\n', '\\n')

def GenerateVersionInfo():
    versionString = "%s-%s" % (env['mode'], env['version'])
    if env['mode'] == 'release':
        versionString = versionString + "-" + env['releaseStr']
    return versionString

def GenerateConfigFile():
    h_fileName = os.getcwd() + '/../../../aitheta_indexer/__signature.h'
    file = open(h_fileName, 'w')
    config_h_content = config_h_content_template % {
        'aitheta_indexer_version' : GenerateVersionInfo(),
        'aitheta_indexer_commit_info' : GenerateGitCommitInfo(),
        'aitheta_indexer_build_info' : GenerateBuildInfo(),
    }
    file.write(config_h_content)
    file.close()

    return [h_fileName]

def aGenConfig(self, *args, **kwargs):
    target = GenerateConfigFile()
    self.Default(target)
    self.AlwaysBuild(target)
    return target

env.AddMethod(aGenConfig)
env.aGenConfig();

plugins = env.aDirs('plugins')
test = env.aDirs('test')
