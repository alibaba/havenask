# -*- mode: python -*-

# Inherit the environment from my parent.
Import('env')
import os
import copy
import time
import getpass
import subprocess


def shell_code(cmd, cwd=None):
    p = subprocess.Popen(cmd, shell=True, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    rc = p.returncode
    return rc, out, err


def aSync(env, target, source):
    cmd_tpl = 'rsync -azi --delete "{source}" `python -c "import os; print os.path.dirname(\'{target}\')"`'
    copy = env.Command(target, source, cmd_tpl.format(source='$SOURCE', target='$TARGET'))
    # run to detect changes
    tgt_path = copy[0].get_abspath()
    src_path = copy[0].sources[0].get_abspath()
    cmd = cmd_tpl.format(source=src_path, target=tgt_path) + ' --dry-run'
    rc, out, err = shell_code(cmd)
    if out.strip():
        env.AlwaysBuild(copy)
    return copy
env.__class__.aSync = aSync


# Make a copy of the environment, so my changes are limited in this directory and sub-directories.
env = env.Clone()

env.Append(ACSUBST = {'BUILDDIR': env['RELATIVE_BUILD_DIR']})
env.Append(ACSUBST = {'TOP_BUILDDIR': env['RELATIVE_BUILD_DIR']})
env.Append(ACSUBST = {'TOP_SRCDIR': env['TOP_DIR']})
env.Append(ACSUBST = {'abs_top_srcdir': env['TOP_DIR']})
env.Append(ACSUBST = {'INSTALL_ROOT': env['install_root']})

ha_protocol_version = "ha3-protocol-3.0"
env.Append(ACSUBST = {'HA_PROTOCOL_VERSION': ha_protocol_version})

env['depend_static_libs'] =  []

env['depend_dynamic_libs'] = [
    'suez_turing',
    'suez',
    'build_service',
    'indexlib',
    'turing_ops',
    'basic_variant',
    'iquan_jni',
    'iquan_common',
    'navi',
    'matchdoc',
    'swift_client_minimal',
    'cava',
    'hippo',
    'multi_call',
    'fslib-framework',
    'amonitor_client',
    'kmonitor_client',
    'kmonitor_adapter',
    'resource_reader',
    'cm_basic',
    'cm_sub',
    'sap_eagle',
    'eagleeye_core',
    'mid-diamond',
    'worker_framework',
    'http_arpc',
    'kvtracer',
    'autil',
    'arpc',
    'anet',
    'sap',
    'alog',
    'z',
    'dl',
    'xml2',
    'snappy',
    'lz4',
    'zstd',
    'protobuf',
    'pthread',
    'sap_eagle',
    'hiredis',
    'zookeeper_mt',
    'tensorflow_cc',
    'absl_strings',
]


env['ha3_depend_libs'] = env['depend_static_libs'] + env['depend_dynamic_libs']

env['ha3_test_depend_lib'] = env['ha3_depend_libs'] + ['unittest', 'gmock', 'gtest']


# List my sub-directories.
def getSubdirs(abs_path_dir) :
    lst = [ name for name in os.listdir(abs_path_dir) if os.path.isdir(os.path.join(abs_path_dir, name)) and name[0] != '.' ]
    return lst

processor_plugins = []

for plugin_dir in getSubdirs(Dir('.').srcnode().abspath):
    if plugin_dir in ['docs','testlib','testdata', 'build', "runtime_testdata", "util"]:
        continue
    ret = env.aDirs(plugin_dir)
    processor_plugins.append(ret)

linkflags = []
linkflags.append('-Wl,--whole-archive')
for lib in processor_plugins:
    linkflags.append("%s/lib/lib%s.a" % (env['ABS_BUILD_DIR'], lib))
linkflags.append('-Wl,--no-whole-archive')
env.Append(LINKFLAGS=linkflags)

env.aSharedLibraryAndInstall(target = 'processor_example',
    source = [],
    LIBS = processor_plugins)
