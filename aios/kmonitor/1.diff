diff --git a/aios/kmonitor/BUILD b/aios/kmonitor/BUILD
index 7da02fcf..547fcf0c 100644
--- a/aios/kmonitor/BUILD
+++ b/aios/kmonitor/BUILD
@@ -28,6 +28,7 @@ cc_library(
     deps=[
         '//aios/alog', '//aios/autil:data_buffer', '//aios/autil:env_util',
         '//aios/autil:json', '//aios/autil:metric', '//aios/autil:thread',
+        '//aios/network/curl_client:curl_client_lib',
         '@com_google_googletest//:gtest_prod'
     ],
     alwayslink=1
diff --git a/aios/kmonitor/adapter/kmonitor_adapter/MonitorFactory.cpp b/aios/kmonitor/adapter/kmonitor_adapter/MonitorFactory.cpp
index fdae51c7..35472c30 100644
--- a/aios/kmonitor/adapter/kmonitor_adapter/MonitorFactory.cpp
+++ b/aios/kmonitor/adapter/kmonitor_adapter/MonitorFactory.cpp
@@ -53,6 +53,12 @@ void MonitorFactory::init() {
     }
     metricsConfig.set_sink_address(sinkAddress.c_str());
 
+    bool enableKmonLogFileSink = false, enableKmonPromSink = false;
+    enableKmonLogFileSink = autil::EnvUtil::getEnv("kmonitorEnableLogFileSink", enableKmonLogFileSink);
+    enableKmonPromSink = autil::EnvUtil::getEnv("kmonitorEnablePrometheusSink", enableKmonPromSink);
+    metricsConfig.set_enable_log_file_sink(enableKmonLogFileSink);
+    metricsConfig.set_enable_prometheus_sink(enableKmonPromSink);
+
     string app = autil::EnvUtil::getEnv("KMONITOR_ADAPTER_APP");
     if (app.empty()) {
         AUTIL_LOG(WARN, "not report monitor for no KMONITOR_ADAPTER_APP");
diff --git a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.cpp b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.cpp
index ba40cbc9..27b7f08a 100644
--- a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.cpp
+++ b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.cpp
@@ -38,6 +38,7 @@ void MetricsConfig::Jsonize(autil::legacy::Jsonizable::JsonWrapper &json) {
     json.Jsonize("tenant_name", tenant_name_);
     json.Jsonize("service_name", service_name_);
     json.Jsonize("enable_log_file_sink", enable_log_file_sink_, enable_log_file_sink_);
+    json.Jsonize("enable_prometheus_sink", enable_prometheus_sink_, enable_prometheus_sink_);
     json.Jsonize("manually_mode", manually_mode_, manually_mode_);
     json.Jsonize("use_common_tag", use_common_tag_, use_common_tag_);
     if (json.GetMode() == FROM_JSON) {
@@ -69,6 +70,7 @@ MetricsConfig &MetricsConfig::operator=(const MetricsConfig &config) {
         service_name_ = config.service_name();
         sink_address_ = config.sink_address();
         enable_log_file_sink_ = config.enable_log_file_sink();
+        enable_prometheus_sink_ = config.enable_prometheus_sink();
         manually_mode_ = config.manually_mode();
         *global_tags_ = *config.global_tags();
         use_common_tag_ = config.use_common_tag();
@@ -92,12 +94,20 @@ const string &MetricsConfig::sink_address() const { return sink_address_; }
 
 void MetricsConfig::set_sink_address(const string &sink_address) { sink_address_ = sink_address; }
 
+
 bool MetricsConfig::enable_log_file_sink() const { return enable_log_file_sink_; }
 
 void MetricsConfig::set_enable_log_file_sink(bool enable_log_file_sink) {
     enable_log_file_sink_ = enable_log_file_sink;
 }
 
+bool MetricsConfig::enable_prometheus_sink() const { return enable_prometheus_sink_; }
+
+void MetricsConfig::set_enable_prometheus_sink(bool enable_prometheus_sink) {
+    enable_prometheus_sink_ = enable_prometheus_sink;
+}
+
+
 bool MetricsConfig::manually_mode() const { return manually_mode_; }
 
 void MetricsConfig::set_manually_mode(bool mode) { manually_mode_ = mode; }
diff --git a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.h b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.h
index 38282ba3..b0e80332 100644
--- a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.h
+++ b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsConfig.h
@@ -40,6 +40,8 @@ public:
     void set_sink_address(const std::string &sink_address);
     void set_enable_log_file_sink(bool local_path);
     bool enable_log_file_sink() const;
+    void set_enable_prometheus_sink(bool local_path);
+    bool enable_prometheus_sink() const;
     void set_manually_mode(bool mode);
     bool manually_mode() const;
     bool use_common_tag() const;
@@ -60,6 +62,7 @@ private:
     int sink_queue_capacity_;
     std::string sink_address_;
     bool enable_log_file_sink_ = false;
+    bool enable_prometheus_sink_ = false;
     bool manually_mode_ = false;
     bool use_common_tag_ = true;
     MetricsTags *global_tags_;
diff --git a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsSystem.cpp b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsSystem.cpp
index 6364712a..0bebb64e 100644
--- a/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsSystem.cpp
+++ b/aios/kmonitor/cpp_client/src/kmonitor/client/core/MetricsSystem.cpp
@@ -23,6 +23,7 @@
 #include "kmonitor/client/core/MetricsTags.h"
 #include "kmonitor/client/net/BatchFlumeEvent.h"
 #include "kmonitor/client/sink/FlumeSink.h"
+#include "kmonitor/client/sink/PrometheusSink.h"
 
 BEGIN_KMONITOR_NAMESPACE(kmonitor);
 AUTIL_LOG_SETUP(kmonitor, MetricsSystem);
@@ -66,8 +67,20 @@ void MetricsSystem::Init(MetricsConfig *config) {
 }
 
 bool MetricsSystem::initSink(MetricsConfig *config) {
-    auto sink =
-        std::make_shared<FlumeSink>(config->tenant_name(), config->sink_address(), config->enable_log_file_sink());
+    std::shared_ptr<Sink> sink;
+    bool enablePrometheusSink = config->enable_prometheus_sink(), enableLogFileSink = config->enable_log_file_sink();
+    if(enablePrometheusSink && enableLogFileSink) {
+        AUTIL_LOG(ERROR, "you can only choose one between prometheus sink or logfile sink. Prometheus sink will be given priority");
+        enableLogFileSink = false;
+    }
+    if(enablePrometheusSink) {
+        AUTIL_LOG(INFO, "enable prometheus sink");
+        sink = std::make_shared<PrometheusSink>(config->sink_address());
+    }
+    else {
+        AUTIL_LOG(INFO, "enable flume sink");
+        sink = std::make_shared<FlumeSink>(config->tenant_name(), config->sink_address(), enableLogFileSink);
+    }
     if (!sink->Init()) {
         AUTIL_LOG(ERROR, "Add and init sink %s failed", sink->GetName().c_str());
         return false;
