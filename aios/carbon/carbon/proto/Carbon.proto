syntax = "proto2";

import "arpc/proto/rpc_extensions.proto";
import "hippo/proto/Common.proto";
import "carbon/proto/Status.proto";

package carbon.proto;

option cc_generic_services = true;
option py_generic_services = true;

message AddGroupRequest {
    optional bytes groupPlan = 1;
}

message AddGroupResponse {
    optional bytes errorInfo = 1;
    optional bytes versionInfo = 2;
}

message UpdateGroupRequest {
    optional bytes groupPlan = 1;
}

message UpdateGroupResponse {
    optional bytes errorInfo = 1;
    optional bytes versionInfo = 2;
}

message DeleteGroupRequest {
    optional bytes groupId = 1;
}

message DeleteGroupResponse {
    optional bytes errorInfo = 1;
}

message GetGroupStatusRequest {
    repeated string groupIds = 1;
}

message GetGroupStatusResponse {
    optional bytes statusInfo = 1;
    optional bytes errorInfo = 2;
}

message CreatePlanElementRequest {
    optional string path = 1;
    optional bytes content = 2;
}

message CreatePlanElementResponse {
    optional bytes errorInfo = 1;
}

message ReadPlanElementRequest {
    optional string path = 1;
}

message ReadPlanElementResponse {
    optional string value = 1;
    optional bytes errorInfo = 2;
}

message UpdatePlanElementRequest {
    optional string path = 1;
    optional bytes content = 2;
}

message UpdatePlanElementResponse {
    optional bytes errorInfo = 1;
}

message DeletePlanElementRequest {
    optional string path = 1;
}

message DeletePlanElementResponse {
    optional bytes errorInfo = 1;
}

message ReadStatusRequest {
    repeated string groupIds = 1;
    optional string path = 2;
}

message ReadStatusResponse {
    repeated bytes value = 1;
    optional bytes errorInfo = 2;
}

message SetLoggerLevelRequest {
    enum LogLevel {
	DISABLE = 0;
	FATAL   = 1;
	ERROR   = 2;
	WARN    = 3;
	INFO    = 4;
	DEBUG   = 5;
	TRACE1  = 6;
	TRACE2  = 7;
	TRACE3  = 8;
	NOTSET  = 9;
    }
    required string logger = 1;
    required LogLevel level = 2;
}

message SetLoggerLevelResponse {
    optional bytes errorInfo = 1;
}

message AdjustRunningArgsRequest {
    optional string argsField = 1;
    optional bytes argsValue = 2;
}

message AdjustRunningArgsResponse {
    optional bytes errorInfo = 1;
}

message GetCarbonInfoRequest {
}

message GetCarbonInfoResponse {
    optional bytes errorInfo = 1;
    optional string carbonInfo = 2;
}

message SetCarbonConfigRequest {
    optional bytes config = 1;
}

message SetCarbonConfigResponse {
    optional bytes errorInfo = 1;
}

message GetCarbonConfigRequest {
}

message GetCarbonConfigResponse {
    optional bytes errorInfo = 1;
    optional bytes config = 2;
}

message GetDriverStatusRequest {
}

message GetDriverStatusResponse {
    optional bytes errorInfo = 1;
    optional bytes status = 2;
}

service CarbonMasterService
{
    option (arpc.global_service_id) = 1900;

    rpc addGroup(AddGroupRequest) returns (AddGroupResponse) {
	option (arpc.local_method_id) = 1901;
    }

    rpc updateGroup(UpdateGroupRequest) returns (UpdateGroupResponse)  {
	option (arpc.local_method_id) = 1902;
    };

    rpc deleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse) {
	option (arpc.local_method_id) = 1903;
    };

    rpc getGroupStatus(GetGroupStatusRequest) returns (GetGroupStatusResponse) {
	option (arpc.local_method_id) = 1904;
    }

    rpc setLoggerLevel(SetLoggerLevelRequest) returns (SetLoggerLevelResponse) {
	option (arpc.local_method_id) = 1905;
    }

    rpc getCarbonInfo(GetCarbonInfoRequest) returns (GetCarbonInfoResponse) {
	option (arpc.local_method_id) = 1906;
    }

    rpc createPlanElement(CreatePlanElementRequest) returns (CreatePlanElementResponse) {
	option (arpc.local_method_id) = 1907;
    }

    rpc updatePlanElement(UpdatePlanElementRequest) returns (UpdatePlanElementResponse) {
	option (arpc.local_method_id) = 1908;
    }

    rpc readPlanElement(ReadPlanElementRequest) returns (ReadPlanElementResponse) {
	option (arpc.local_method_id) = 1909;
    }

    rpc deletePlanElement(DeletePlanElementRequest) returns (DeletePlanElementResponse) {
	option (arpc.local_method_id) = 1910;
    }

    rpc readStatus(ReadStatusRequest) returns (ReadStatusResponse) {
	option (arpc.local_method_id) = 1911;
    }

    rpc adjustRunningArgs(AdjustRunningArgsRequest) returns (AdjustRunningArgsResponse) {
	option (arpc.local_method_id) = 1912;
    }

    rpc setGlobalConfig(SetCarbonConfigRequest) returns (SetCarbonConfigResponse) {
	option (arpc.local_method_id) = 1913;
    }

    rpc getGlobalConfig(GetCarbonConfigRequest) returns (GetCarbonConfigResponse) {
	option (arpc.local_method_id) = 1914;
    }

    rpc getDriverStatus(GetDriverStatusRequest) returns (GetDriverStatusResponse) {
	option (arpc.local_method_id) = 1915;
    }
}

// the following messages for being compitable with the old version
enum ServiceAdapterType {
    ST_NONE = 0;
    ST_CM2 = 1;
    ST_VIP = 2;
    ST_LVS = 3;
    ST_HSF = 4;
    ST_ARMORY = 5;
    ST_SLB = 6;
    ST_ECS_ARMORY = 7;
    ST_VPC_SLB = 8;
    ST_DROGO_LVS = 10; // placeholder for drogo lvs sync
    ST_SKYLINE = 11;
    ST_ECS_SKYLINE = 12; // no virt-ip
}

message ServiceConfig {
    optional string name = 1;
    optional ServiceAdapterType type = 2;
    optional string configStr = 3;
    optional string statusPath = 4;
    optional string metaStr = 5;
    optional bool masked = 6;
    optional int64 deleteDelay = 7;
}
message PublishServiceRequest {
    optional string roleName = 1;
    repeated ServiceConfig serviceConfigs = 2;
}

message KVPair {
    optional string key = 1;
    optional string value = 2;
};

message HealthCheckerConfig {
    optional string name = 1;
    repeated KVPair args = 2;
};

message ConstraintConfig {
    enum SpreadLevel {
	UNLIMIT = 0;
	HOST = 1;
	FRAME = 2;
	RACK = 3;
	ASW = 4;
	PSW = 5;
    };
    optional SpreadLevel spreadLevel = 1 [default = HOST];
    optional bool strictly = 2;
    optional bool useHostWorkDir = 3 [default = true];
    optional int32 maxInstancePerHost = 4;
    optional int32 maxInstancePerFrame = 5;
    optional int32 maxInstancePerRack = 6;
    optional int32 maxInstancePerASW = 7;
    optional int32 maxInstancePerPSW = 8;
    repeated string specifiedIps = 9;
    repeated string prohibitedIps = 10;
}

message RoleDescription {
    optional string roleName = 1;
    repeated hippo.proto.PackageInfo packageInfos = 2;
    repeated hippo.proto.ProcessInfo processInfos = 3;
    repeated hippo.proto.DataInfo dataInfos = 4;
    repeated hippo.proto.SlotResource resources = 5;
    repeated hippo.proto.Resource declarations = 6;
    optional hippo.proto.ResourceRequest.AllocateMode allocateMode = 7 [default = AUTO];
    optional string queue = 8;
    optional int32 count = 9;
    optional int32 minHealthCapacity = 10;
    optional int32 maxFailedCount = 11 [default = 20];
    optional int64 slotFailExpireTime = 12 [default = 600000000];//10 min
    optional HealthCheckerConfig healthCheckerConfig = 13;
    optional bool isAutoReclaim = 14 [default = true];
    optional hippo.proto.Priority priority = 15;
    optional string signature = 16; //update by rolling, broadcast through heartbeat
    repeated KVPair properties = 17; //broadcast to all node, without rolling, for pre-deploy
    optional string groupId = 18;
    optional string customInfo = 19;
    optional int32 latestVersionRatio = 20 [default = 100];
    optional bool online = 21 [default = true];
    optional bool updatingGracefully = 22 [default = false];
    optional int64 notMatchTimeout = 23 [default = 900];
    optional string userDefVersion = 24;
    optional hippo.proto.ResourceRequest.CpusetMode cpusetMode = 25;
    repeated string containerConfigs = 26;
    optional bool restartAfterResourceChange = 27 [default = true];
    optional int64 notReadyTimeout = 28 [default = -1];
    optional bool preload = 29 [default = false];
    optional ConstraintConfig constraints = 30;
    repeated KVPair metaTags = 31; //meta infos
    optional int32 brokenRecoverQuota = 32 [default = 5];
    optional bool recoverResourceNotMatchNode = 33 [default = true];
    repeated KVPair extraRoleConfig = 34;
}

message ReplicaNode {
    enum SlotStatus {
	ST_PKG_FAILED = 0;
	ST_UNKNOWN = 1;
	ST_DEAD = 2;
	ST_PROC_FAILED = 3;
	ST_PROC_RUNNING = 4;
	ST_PROC_RESTARTING = 5;
    };

    enum HealthStatus {
	HT_DEAD = 0;
	HT_UNKNOWN = 1;
	HT_ALIVE = 2;
    };

    enum ServiceStatus {
	SVT_UNKNOWN = 0;
	SVT_UNAVAILABLE = 1;
	SVT_PART_AVAILABLE = 2;
	SVT_AVAILABLE = 3;
	SVT_DEFAULT_AVAILABLE = 4;
    };

    enum WorkerStatus {
	WS_UNKNOWN = 0;
	WS_NOT_READY = 1;
	WS_READY = 2;
    };

    optional hippo.proto.SlotId slotId = 1;
    optional SlotStatus slotStatus = 2;
    optional HealthStatus healthStatus = 3;
    optional ServiceStatus serviceStatus = 4;
    optional bool isOfflined = 5;
    optional bool isReclaiming = 6;
    optional int64 allocateTime = 7;
    optional string signature = 8; // cur signature
    optional string customInfo = 9; // cur customInfo
    optional WorkerStatus workerStatus = 10;
    optional string targetSignature = 11;
    optional string targetCustomInfo = 12;
    optional string serviceInfo = 13;
    optional string slotInfoStr = 14;
    optional string userDefVersion = 15;
    optional bool readyForCurVersion = 16;
    repeated hippo.proto.ProcessStatus processStatus = 17;
    optional string ip = 18;
    optional bool isBackup = 19;
    optional string replicaNodeId = 20;
    optional string workerMode = 21;
    repeated Condition conditions = 23;
}

message RolePlan {
    repeated hippo.proto.SlotResource slotResources = 1;
    optional int32 count = 2;
    repeated hippo.proto.PackageInfo packageInfos = 3;
    repeated hippo.proto.ProcessInfo processInfos = 4;
    repeated hippo.proto.DataInfo dataInfos = 5;
    repeated hippo.proto.Resource declareResources = 6;
    optional hippo.proto.ResourceRequest.AllocateMode allocateMode = 7;
    optional string queue = 8;
    optional hippo.proto.Priority priority = 9;
}

message RoleInfo {
    optional string info = 1;
    repeated string replicaNodes = 2;
}

message RoleInstanceInfo {
    optional string roleId = 1;
    optional int32 targetCount = 2;
    optional RolePlan rolePlan = 3;
    repeated ReplicaNode replicaNodes = 4;
}

message ServiceInfo {
    optional string serviceName = 1;
    optional string serviceConfig = 2;
}

message RoleStatus {
    enum Status {
	RS_UNKNOWN = 0;
	RS_RUNNING = 1;
	RS_UPDATING = 2;
	RS_UPDATE_FAILED = 3;
    };

    optional string roleName = 1;
    optional Status status = 2;
    optional RoleInfo curInfo = 3;
    optional RoleInfo nextInfo = 4;
    optional bool isAutoPublish = 5;
    repeated ServiceInfo serviceInfos = 6;
    repeated KVPair properties = 7;
    optional string resourceTag = 8;
    optional RoleInstanceInfo curInstanceInfo = 9;
    optional RoleInstanceInfo nextInstanceInfo = 10;
    optional int32 updateRatio = 11;
    optional int64 lastRollingUpdateStartTime = 12;
    optional string userDefVersion = 13;
    optional bool readyForCurVersion = 14 [default = false];
    optional int32 adjustedCount = 15 [default = 0];
    optional int32 adjustedMinHealthCapacity = 16 [default = 0];
}
