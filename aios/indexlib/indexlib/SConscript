# -*- mode: python -*-
import os, sys, socket, time
import getpass
# Inherit the environment from my parent.
Import('env')

# Make a copy of the environment, so my changes are limited in this directory and sub-directories.
env = env.Clone()


config_h_filename = env['TOP_DIR'] + "/indexlib/misc/signature.h"

config_h_content_template = """//signature.h
#ifndef __INDEXLIB_CONFIG_H
#define __INDEXLIB_CONFIG_H
#define __INDEXLIB_VERSION "%(indexlib_version)s"
#define __INDEXLIB_COMMIT_INFO "%(indexlib_commit_info)s"
#define __INDEXLIB_BUILD_INFO "%(indexlib_build_info)s"
#endif // __INDEXLIB_CONFIG_H
"""

def run(cmd):
    import subprocess
    p = subprocess.Popen(cmd, shell=True, close_fds=False,
                         stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if 0 != p.returncode:
        raise Exception('Execute cmd [%s] faild. data[%s] error[%s], code[%d]'
                        % (cmd, stdout, stderr, p.returncode))
    return stdout

def GenerateBuildInfo():
    login_name = getpass.getuser()
    try:
        host_ip = socket.gethostbyname(socket.gethostname())
    except:
        host_ip = 'unknown_host'
    build_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    return "%s@%s %s" % (login_name, host_ip, build_time)

def runGitCmd(cmd):
    try:
        gitInfo = run(cmd)
    except Exception as e:
        gitInfo = ""
    return gitInfo

def GenerateGitCommitInfo():
    log_info = runGitCmd("git log --pretty=format:'%H %s (%cn)' -1")
    return log_info.replace('"', '\\"').replace("'", "\\'").replace('\n', '\\n')

def GenerateVersionInfo():
    versionString = "%s-%s" % (env['mode'], env['version'])
    if env['mode'] == 'release':
        versionString = versionString + "-" + env['releaseStr']
    return versionString

def GenerateConfigFile():
    file = open(config_h_filename, 'w')
    config_h_content = config_h_content_template % {
        'indexlib_version' : GenerateVersionInfo(),
        'indexlib_commit_info' : GenerateGitCommitInfo(),
        'indexlib_build_info' : GenerateBuildInfo(),
    }
    file.write(config_h_content)
    file.close()

    return [config_h_filename]

def aGenConfig(self, *args, **kwargs):
    target = GenerateConfigFile()
    self.Default(target)
    self.AlwaysBuild(target)
    return target

env.AddMethod(aGenConfig)
if not os.path.exists(config_h_filename) or env['build_signature'] == 'yes':
    env.aGenConfig()

misc = env.aDirs('misc')
util = env.aDirs('util')
common = env.aDirs('common')
config = env.aDirs('config')
document = env.aDirs('document')
storage = env.aDirs('storage')
file_system = env.aDirs('file_system')
merger = env.aDirs('merger')
env.aDirs('mockstorage')
index = env.aDirs('index')
testlib = env.aDirs('testlib')
partition = env.aDirs('partition')
index_base = env.aDirs('index_base')
plugin = env.aDirs('plugin')
test_tool = env.aDirs('test')
table = env.aDirs('table')

# env.aSharedLibraryAndInstall(target='indexlib_open',
#                              source = [table])

env.aLibraryAndInstall(target='indexlib',
                       source = [util, merger, config,
                                 document, storage, file_system, index, testlib, table,
                                 plugin, common, misc, partition, index_base],
                       LIBS = ['lz4', 'snappy', 'zstd', 'z', 'future_lite', 'beeper-framework'])

# env.aLibraryAndInstall(target='indexlib_tester',
#                        source = [util, merger, config,
#                                  document, storage, file_system, index, testlib,
#                                  plugin, common, misc, partition, index_base, test_tool],
#                        LIBS = ['lz4', 'snappy', 'zstd', 'z'])

env.aLibraryAndInstall(target='indexlib_test_tool',
                       source = [test_tool],
                       LIBS = ['lz4', 'snappy', 'zstd', 'z'])

env.aLibraryAndInstall(target='indexlib_basic',
                       source = [util, storage, file_system, common, misc, config],
                       LIBS = ['lz4', 'snappy', 'zstd', 'z'])
