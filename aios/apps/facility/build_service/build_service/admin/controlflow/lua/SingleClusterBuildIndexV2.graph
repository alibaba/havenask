#import(Tool)
#import(Log)
--todo support add prepare data source task
function graphDef()
   local clusterName = Graph.parameter["clusterName"]
   local incParam = Tool.copyMap(Graph.parameter)
   local fullParam = Tool.copyMap(Graph.parameter)

   --prepare full builder & full processor
   local hasFullBuild = Graph.parameter["buildStep"] == "full"
   if (hasFullBuild)
   then
      -- prepare full processor
      fullProcessor = Graph.loadSimpleFlow(
                    "processor", "fullProcessor", fullParam)
      fullProcessor:addTag("BSFullProcess")
      -- prepare data source
      local prepareDataSourceId = Graph.parameter["prepareDataSourceFlowId"]
      if (prepareDataSourceId == nil)
      then
         Log.log("ERROR", "lack of prepareDataSourceFlowId")
         return false
      end
      prepareDataSourceFlow = Graph.getFlow(prepareDataSourceId)
      Graph.setUpstream(fullProcessor, prepareDataSourceFlow)
   end

   --prepare inc processor
   incParam["buildStep"] = "incremental"
   -- legacy code for control config
   local hasIncProcessor = Graph.parameter["hasIncProcessor"] == "true"
   local disableIncProcessor = Graph.parameter["disableIncProcessor"] == "true"
   if (hasIncProcessor and (not disableIncProcessor))
   then
      incProcessor = Graph.loadSimpleFlow("processor", "incProcessor", incParam)
      incProcessor:addTag("BSIncProcess")
      incProcessor:addTag(clusterName..":BSIncProcessor")
      incParam["processorFlowId"] = incProcessor:getFlowId()
      if (hasFullBuild)
      then
          Graph.setUpstream(incProcessor, fullProcessor)
      end
   else
      -- set builder data description
      local dsJson = Graph.parameter["realtimeDataDescription"]
      incParam["data_description"] = dsJson
      Log.log("WARN", "dsJson: "..dsJson)
   end

   --prepare inc build

   local disableIncBuilder = Graph.parameter["disableIncBuilder"] == "true"
   if (not disableIncBuilder)
   then
      incBuild = Graph.loadSimpleFlow("builderV2", "incBuilder", incParam)
      incBuild:addTag(clusterName..":IncBuild")
      incBuild:addTag("BSBuildV2")
   end

   if (hasFullBuild)
   then
         --prepare full build
         fullParam["fullProcessorFlowId"] = fullProcessor:getFlowId()
         local fullBuild = Graph.loadFlow("FullBuildV2.flow", fullParam)
         fullBuild:addTag(clusterName..":FullBuild")
         fullBuild:addTag("BSFullBuild")
         fullBuild:addTag("BSBuildV2")
         if (not disableIncBuilder)
         then
             Graph.setUpstream(incBuild, fullBuild)
         end
         Graph.declareFriend(fullProcessor, fullBuild)
   end
   return true
end
