#import(Tool)
#import(Log)

function graphDef()
   local param = Tool.copyMap(Graph.parameter)
   local clusterName = param["clusterName"]

   --get last inc flow, set upstream
   local incFlowTag = clusterName..":IncBuild"
   local incFlowIds = Graph.getFlowIdByTag(incFlowTag)
   if (#incFlowIds) > 0
   then
      lastFlowId = incFlowIds[#incFlowIds]
      lastIncFlow = Graph.getFlow(lastFlowId)
   end

   --stop old processor and add new processor
   local incProcessorIds = Graph.getFlowIdByTag(clusterName..":BSIncProcessor")
   if (#incProcessorIds) > 0
   then
      Graph.batchStopFlows(incProcessorIds)
      incProcessor = Graph.loadSimpleFlow("processor", "incProcessor", param)  
      incProcessor:addTag("BSIncProcess")
      incProcessor:addTag(clusterName..":BSIncProcessor")
      Graph.batchSetUpstream(incProcessor:getFlowId(), incProcessorIds, "stopped|finish")
      param['incProcessorFlowId'] = incProcessor:getFlowId()
   else
      local dsJson = Graph.parameter["realtimeDataDescription"]
      param["data_description"] = dsJson
      if (#incFlowIds) > 0
      then
          Graph.batchStopFlows(incFlowIds)
      end
   end

   --create new flow
   local incBuildFlow = Graph.loadFlow("IncBuildV2.flow", param)
   incBuildFlow:addTag(incFlowTag)
   incBuildFlow:addTag("BSBuildV2")
   if (#incProcessorIds) > 0
   then
      Graph.declareFriend(incProcessor, incBuildFlow)
   end
   if lastIncFlow ~= nil
   then
      Graph.setUpstream(incBuildFlow, lastIncFlow, "stopped|finish") 
   end
   return true
end
