#import(Tool)
#import(Log)
--todo support add prepare data source task
function graphDef()
   local clusterName = Graph.parameter["clusterName"]
   local incParam = Tool.copyMap(Graph.parameter)
   local fullParam = Tool.copyMap(Graph.parameter)

   -- Try get clone-index-flow if exist
   -- which only exist in case of migrate index from origin to target
   local cloneIndexFlow = nil
   cloneIndexFlowId = Graph.parameter["cloneIndexFlowId"]
   
   if (cloneIndexFlowId ~= nil)
   then
      cloneIndexFlow = Graph.getFlow(cloneIndexFlowId)
      if (cloneIndexFlow == nil)
      then
         Log.log("ERROR", "clone index flow is nil Id:"..cloneIndexFlowId)
         return false
      end
      Log.log("INFO", "Success get clone index flow. Id:"..cloneIndexFlowId)
   end

   Log.log("WARN", "buildStep:"..Graph.parameter["buildStep"])
   
   local hasFullBuild = ((Graph.parameter["buildStep"] == "full") and (cloneIndexFlowId == nil))
   if (hasFullBuild)
   then
      Log.log("INFO", "hasFullBuild == true, load flow fullProcessor")
      -- prepare full processor
      fullProcessor = Graph.loadSimpleFlow(
                    "processor", "fullProcessor", fullParam)
      fullProcessor:addTag("BSFullProcess")
      -- prepare data source
      local prepareDataSourceId = Graph.parameter["prepareDataSourceFlowId"]
      if (prepareDataSourceId == nil)
      then
         Log.log("ERROR", "lack of prepareDataSourceFlowId")
         return false
      end
      prepareDataSourceFlow = Graph.getFlow(prepareDataSourceId)
      Graph.setUpstream(fullProcessor, prepareDataSourceFlow)
   end
   --prepare merge crontab
   local mergeCrontab = Graph.loadSimpleFlow(
            "mergeCrontab", "mergeCrontab", Graph.parameter)
   local mergeCrontabTag = clusterName..":MergeCrontab"
   mergeCrontab:addTag(mergeCrontabTag)

   --prepare inc build
   incParam["buildStep"] = "incremental"
   incParam["mergeCrontabFlowId"] = mergeCrontab:getFlowId()
   if (cloneIndexFlowId ~= nil)
   then
      incParam["cloneIndexFlowId"] = cloneIndexFlowId
   end
   local incBuild = Graph.loadFlow("SimpleIncBuild.flow", incParam)
   local incBuildTag = clusterName..":IncBuild"
   incBuild:addTag(incBuildTag)
   Graph.declareFriend(mergeCrontab, incBuild)

   if (hasFullBuild)
   then
      --prepare full build
      fullParam["fullProcessorFlowId"] = fullProcessor:getFlowId()
      fullParam["mergeCrontabFlowId"] = mergeCrontab:getFlowId()
      local fullBuild = Graph.loadFlow("FullBuild.flow", fullParam)
      fullBuild:addTag(clusterName..":FullBuild")
      fullBuild:addTag("BSFullBuild")
      Graph.setUpstream(incBuild, fullBuild)
      Graph.setUpstream(mergeCrontab, fullProcessor)
      Graph.declareFriend(fullProcessor, fullBuild)
      Graph.declareFriend(mergeCrontab, fullBuild)
   elseif (cloneIndexFlowId ~= nil)
   then
      Graph.setUpstream(incBuild, cloneIndexFlow)
      Graph.setUpstream(mergeCrontab, cloneIndexFlow)
      Graph.declareFriend(cloneIndexFlow, incBuild)
      
      Log.log("INFO", "Success set upstream to cloneIndexFlow.") 
   end
   return true
end

