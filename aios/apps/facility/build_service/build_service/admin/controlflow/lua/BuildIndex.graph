--[[
   Graph.parameter : graph related kv parameters 
   Graph.loadSimpleFlow(taskType, taskIdentifier, taskKVParam = nil) : return flowObject
   Graph.loadFlow(flowFileName, flowKVParam = nil) : return flowObject
   Graph.loadSubGraph(graphId, graphFileName, graphKVParam = nil) : return true : false
   Graph.setUpstream(flow, upstreamFlow, waitStatus = "finish"|"stop"|"xxx") 
   Graph.declareFriend(flow, friendFlow) 
   Graph.getFlowIdByTag(tag) : return flowId list 
   Graph.getFlow(flowId) : return flowObject 
--]]

#import(Tool)
#import(Log)

function isParamDisabledCluster(disableClusters, clusterName)
   if (disableClusters == nil)
   then
      return false
   end

   for i, v in ipairs(disableClusters)
   do
      if (v == clusterName)
      then
	 return true
      end
   end
   return false
end

   
function graphDef()
   local clusterNames = Tool.jsonToList(Graph.parameter["clusterNames"])
   local schemaIdMap = Tool.jsonToMap(Graph.parameter["schemaIdMap"])
   local hasIncProcessorMap = Tool.jsonToMap(Graph.parameter["hasIncProcessorMap"])
   
   local graphConfigParamDisableClusters = nil
   if (Graph.parameter["user_define_param_disable_clusters"] ~= nil)
   then
      graphConfigParamDisableClusters = Tool.strToList(Graph.parameter["user_define_param_disable_clusters"], ";")
   end

   local graphConfigParameters = nil
   if (Graph.parameter["user_define_parameter_keys"] ~= nil)
   then
      graphConfigParameters = Tool.jsonToList(Graph.parameter["user_define_parameter_keys"])
   end
   
   local cloneIndexFlowId = nil

   if (Graph.parameter["needCloneIndex"] == "true")
   then
      local cloneIndexParam = Tool.copyMap(Graph.parameter)

      local taskInitParam = KVParamUtil()
      taskInitParam:setValue("source_admin_address", Graph.parameter["source_admin_address"]) 
      taskInitParam:setValue("source_build_id", Graph.parameter["source_build_id"]) 
      taskInitParam:setValue("madrox_admin_address", Graph.parameter["madrox_admin_address"])
      taskInitParam:setValue("clusterNames", Graph.parameter["clusterNames"])
      
      cloneIndexParam["taskParam"] = taskInitParam:toJsonString()
      cloneIndexParam["clusterName"] = "AllCluster" 

      cloneIndexFlow = Graph.loadSimpleFlow("clone_index_task", "cloneIndex", cloneIndexParam)
      cloneIndexFlow:addTag("BSCloneIndex")
      cloneIndexFlowId = cloneIndexFlow:getFlowId()
   end

   -- prepare data source
   local hasFullBuild = (Graph.parameter["buildStep"] == "full")
   local prepareDataSource = nil
   if (hasFullBuild and cloneIndexFlowId == nil)
   then
      local prepareDataSourceTag = "prepare_data_source"
      local kvMap = KVParamUtil()
      kvMap:setValue("dataSource", Graph.parameter["dataDescriptions"])
      local fullParam = Tool.copyMap(Graph.parameter)
      fullParam["taskParam"] = kvMap:toJsonString()
      fullParam["clusterName"] = "AllCluster"
      prepareDataSource = Graph.loadSimpleFlow(prepareDataSourceTag, "0", fullParam)
      if (prepareDataSource == nil)
      then
         Log.log("ERROR", "initialize prepareDataSource flow fail.")
         return false
      end
   end
   
   for i, v in ipairs(clusterNames)
   do
      local clusterParam = {}
      local isGraphParamDisable = isParamDisabledCluster(graphConfigParamDisableClusters, v)

      clusterParam["clusterName"] = v
      clusterParam["schemaId"] = schemaIdMap[v]
      clusterParam["dataDescriptions"] = Graph.parameter["dataDescriptions"]
      clusterParam["realtimeDataDescription"] = Graph.parameter["realtimeDataDescription"]
      clusterParam["buildId"] = Graph.parameter["buildId"]
      clusterParam["buildStep"] = Graph.parameter["buildStep"]
      clusterParam["cloneIndexFlowId"] = cloneIndexFlowId
      clusterParam["useRandomInitialPathVersion"] = Graph.parameter["useRandomInitialPathVersion"]
      clusterParam["disable_fill_index_info"] = Graph.parameter["disable_fill_index_info"]
      clusterParam["stop_build_required_latency_in_second"] = Graph.parameter["stop_build_required_latency_in_second"]
      clusterParam["stop_build_timeout_in_second"] = Graph.parameter["stop_build_timeout_in_second"]
      clusterParam["fullBuildProcessLastSwiftSrc"] = Graph.parameter["fullBuildProcessLastSwiftSrc"]
      clusterParam["fullMergeStrategyCount"] = Graph.parameter["fullMergeStrategyCount"]

      -- remove graph param if cluster is disabled
      if (isGraphParamDisable == true and graphConfigParameters ~= nil)
      then
	 for di, dv in ipairs(graphConfigParameters)
	 do
	    clusterParam[dv] = nil
	 end
      end
      
      if (prepareDataSource ~= nil)
      then
         clusterParam["prepareDataSourceFlowId"] = prepareDataSource:getFlowId()
      end
      local loadClusterSuccess = false
      local subGraphName = "SingleClusterBuildIndex.graph"
      
      if (hasIncProcessorMap[v] == "false")
      then
         subGraphName = "SingleClusterBuildIndexWithNoIncProcessor.graph"
         Log.log("INFO", "hasIncProcessor == false, load graph: "..subGraphName)
         clusterParam["hasIncProcessor"] = "false"
         loadClusterSuccess = Graph.loadSubGraph(v, subGraphName, clusterParam)
      else
         clusterParam["hasIncProcessor"] = "true" 
         loadClusterSuccess = Graph.loadSubGraph(v, subGraphName, clusterParam)
      end
     
      if (not loadClusterSuccess)
      then
         local errorStr = string.format("load %s fail for cluster:%s", subGraphName, v)
	 Log.log("ERROR", errorStr)
	 return false
      end
   end
   return true
end
